From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Byteflux <byte@byteflux.net>
Date: Wed, 2 Mar 2016 02:17:54 -0600
Subject: [PATCH] Generator Settings


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 275c9e6c60dc78bc2acc6fc8a78727d2030babdd..4c9717c8c2a3bcac8ffe14fc6e7ef0bf242e08b8 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -458,6 +458,11 @@ public class PaperWorldConfig {
         disableRelativeProjectileVelocity = getBoolean("game-mechanics.disable-relative-projectile-velocity", false);
     }
 
+    public boolean generateFlatBedrock;
+    private void generatorSettings() {
+        generateFlatBedrock = getBoolean("generator-settings.flat-bedrock", false);
+    }
+
     public boolean disablePillagerPatrols = false;
     private void pillagerSettings() {
         disablePillagerPatrols = getBoolean("game-mechanics.disable-pillager-patrols", disablePillagerPatrols);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index ba0725590973c8eeb4048049fc44e4fe9dc00f56..c4d9bc35d253a15b0e04e578a687e29db53797e5 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -237,7 +237,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
                 return new Beardifier(structures, chunk);
             }, generatorsettingbase, this.globalFluidPicker, Blender.of(region));
 
-            this.surfaceSystem.buildSurface(region.getBiomeManager(), region.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), generatorsettingbase.useLegacyRandomSource(), worldgenerationcontext, chunk, noisechunk, generatorsettingbase.surfaceRule());
+            this.surfaceSystem.buildSurface(region.getBiomeManager(), region.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), generatorsettingbase.useLegacyRandomSource(), worldgenerationcontext, chunk, noisechunk, generatorsettingbase.surfaceRule(), structures.getWorld()); // Paper
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
index 6cf22a63a5eb294782053bb69cdb6bcd0946d184..e018e2a92197f9cef661784ba497c563c1f9aea8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
@@ -80,7 +80,12 @@ public class SurfaceSystem {
         });
     }
 
-    public void buildSurface(BiomeManager biomeAccess, Registry<Biome> biomeRegistry, boolean useLegacyRandom, WorldGenerationContext context, ChunkAccess chunk, NoiseChunk chunkNoiseSampler, SurfaceRules.RuleSource surfaceRule) {
+    // Paper start
+    private static final SurfaceRules.RuleSource FLAT_BEDROCK_ROOF = SurfaceRules.ifTrue(SurfaceRules.not(SurfaceRules.verticalGradient("bedrock_roof", VerticalAnchor.top(), VerticalAnchor.top())), net.minecraft.data.worldgen.SurfaceRuleData.BEDROCK);
+    private static final SurfaceRules.RuleSource FLAT_BEDROCK_FLOOR = SurfaceRules.ifTrue(SurfaceRules.verticalGradient("bedrock_floor", VerticalAnchor.bottom(), VerticalAnchor.bottom()), net.minecraft.data.worldgen.SurfaceRuleData.BEDROCK);
+    // Paper end
+
+    public void buildSurface(BiomeManager biomeAccess, Registry<Biome> biomeRegistry, boolean useLegacyRandom, WorldGenerationContext context, ChunkAccess chunk, NoiseChunk chunkNoiseSampler, SurfaceRules.RuleSource surfaceRule, net.minecraft.world.level.Level level) { // Paper
         final BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         final ChunkPos chunkPos = chunk.getPos();
         int i = chunkPos.getMinBlockX();
@@ -108,6 +113,17 @@ public class SurfaceSystem {
                 return "ChunkBlockColumn " + chunkPos;
             }
         };
+
+        // Paper start
+        if (level.paperConfig.generateFlatBedrock) {
+            surfaceRule = switch(surfaceRule.id().getPath()) {
+                case "bedrock_roof" -> FLAT_BEDROCK_ROOF;
+                case "bedrock_floor" -> FLAT_BEDROCK_FLOOR;
+                default -> surfaceRule;
+            };
+        }
+        // Paper end
+
         SurfaceRules.Context context2 = new SurfaceRules.Context(this, chunk, chunkNoiseSampler, biomeAccess::getBiome, biomeRegistry, context);
         SurfaceRules.SurfaceRule surfaceRule2 = surfaceRule.apply(context2);
         BlockPos.MutableBlockPos mutableBlockPos2 = new BlockPos.MutableBlockPos();
